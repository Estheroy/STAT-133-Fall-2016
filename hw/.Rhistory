install.packages("rticles", type = "source")
gg
u
u
install.packages("rticles", type = "source")
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 1)
p2 <- c(100, 100)
find_distance(p1, p2)
# your find_distance() function
# function for computing the distance between two given points
# input: p1, numeric vector with length 2 for coordinate of first point
#        p2, numeric vector with length 2 for coordinate of second point
# output: the distance between the two points
find_distance = function(p1, p2) {
point_sum = sum( (p2 - p1)^2 )
distance = sqrt(point_sum)
return(distance)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 1)
p2 <- c(100, 100)
find_distance(p1, p2)
# your find_midpoint() function
# function for computing the midpoint between two given points
# input: p1, numeric vector with length 2 for coordinate of first point
#        p2, numeric vector with length 2 for coordinate of second point
# output: the midpoint between the two points
find_midpoint = function(p1, p2) {
midpoint = (p1 + p2) / 2
return(midpoint)
}
p1 = c(1,1)
p2 = c(100,100)
p1
p2
find_midpoint(p1,p2)
# your find_midpoint() function
# function for computing the midpoint between two given points
# input: p1, numeric vector with length 2 for coordinate of first point
#        p2, numeric vector with length 2 for coordinate of second point
# output: the midpoint between the two points
find_midpoint = function(p1, p2) {
midpoint = (p1 + p2) / 2
return(midpoint)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_midpoint(p1, p2)
# your find_slope() function
# function for computing the slope between two given points
# input: p1, numeric vector with length 2 for coordinate of first point
#        p2, numeric vector with length 2 for coordinate of second point
# output: the slope between the two points
find_slope = function(p1, p2) {
diff = p2 - p1
slope = diff[2]/diff[1]
return(slope)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_slope(p1, p2)
# your find_intercept() function
# function for computing the intercept of the line between two given points
# input: p1, numeric vector with length 2 for coordinate of first point
#        p2, numeric vector with length 2 for coordinate of second point
# output: the intercept of the line between the two points
find_intercept = function(p1, p2) {
slope = find_slope(p1, p2)
intercept = p1[2] - slope * p1[1]
return(intercept)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_intercept(p1, p2)
# your find_line() function
# function for computing the line between two given points
# input: p1, numeric vector with length 2 for the coordinate of first point
#        p2, numeric vector with length 2 for the coordinate of second point
# output: the line between the two points
find_line = function(p1, p2) {
point_line = list(
slope = find_slope(p1, p2),
intercept = find_intercept(p1, p2))
return(point_line)
}
p1 = c(2,4)
p2 = c(3,5)
eq = find_line(p1, p2)
eq
p1 = c(1,2)
p1 = c(2,5)
p1 = c(1,2)
p2 = c(2,5)
eq = find_line(p1, p2)
eq
eq = find_line(c(1,2), c(3,3))
eq
0.5*1 + 3/2
0.5*3 + 3/2
(1/2)*3 + 3/2
(1/2)*1 + 3/2
(1/2)*3 + 3/2
