theme_minimal()
# step-line plot, with points, showing the progression of women records
# (points colored by country)
date = womens$date
height = womens$height
Country = womens$country
ggplot(womens, aes(x = date, y = height)) +
geom_point(aes(color = Country)) +
geom_step(color = "gray", size = 1) +
ggtitle("Women's High Jump World Records Progression") +
theme_minimal()
# step-line plot, with points, showing the progression of women records
# (points colored by country)
date = womens$date
height = womens$height
Country = womens$country
ggplot(womens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Women's High Jump World Records Progression") +
theme_minimal()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_point(aes(color = Country)) +
geom_step(color = "gray", size = 1) +
ggtitle("Men's High Jump World Records Progression") +
theme_minimal()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_minimal()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_grey()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_grey()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_gray()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_light()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_bw()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_classic()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_get()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_linedraw()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_update()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_void()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_bw()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_minimal()
# step-line plot, with points, showing the progression of women records
# (points colored by country)
date = womens$date
height = womens$height
Country = womens$country
ggplot(womens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Women's High Jump World Records Progression") +
theme_minimal()
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
date = records$date
height = records$height
gender = records$gender
ggplot(records, aes(x = date, y = height, group = gender)) +
geom_point(aes(color = gender)) +
ggtitle("High Jump World Records Progression (by gender)") +
geom_step(aes(color = gender)) +
theme_minimal()
# step-line plot, with points, showing the progression of records
# (facetting by gender)
ggplot(records, aes(x = records$date, y = records$height)) +
facet_grid(~ gender)
# step-line plot, with points, showing the progression of records
# (facetting by gender)
ggplot(records, aes(x = records$date, y = records$height)) +
geom_point(aes(color = gender)) +
geom_step(aes(color = gender)) +
ggtitle("High Jump World Records Progression (by gender)") +
facet_grid(~ gender)
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
date = records$date
height = records$height
gender = records$gender
ggplot(records, aes(x = date, y = height, group = gender)) +
geom_point(aes(color = gender)) +
ggtitle("High Jump World Records Progression (by gender)") +
geom_step(aes(color = gender)) +
theme_minimal()
# step-line plot, with points, showing the progression of records
# (facetting by gender)
ggplot(records, aes(x = records$date, y = records$height)) +
geom_point(aes(color = gender)) +
geom_step(aes(color = gender)) +
ggtitle("High Jump World Records Progression (by gender)") +
facet_grid(~ gender)
# step-line plot, with points, showing the progression of records
# (facetting by gender)
ggplot(records, aes(x = records$date, y = records$height)) +
geom_point(aes(color = gender)) +
geom_step(aes(color = gender)) +
ggtitle("High Jump World Records Progression (by gender)", subtitle = "dd") +
facet_grid(~ gender)
?ggtitle
# step-line plot, with points, showing the progression of women records
# (points colored by country)
womens = filter(records, gender = "female")
date = womens$date
height = womens$height
Country = womens$country
ggplot(womens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Women's High Jump World Records Progression") +
theme_minimal()
# step-line plot, with points, showing the progression of men records
# (points colored by country)
mens = filter(records, gender = "male")
date = mens$date
height = mens$height
Country = mens$country
ggplot(mens, aes(x = date, y = height)) +
geom_step(color = "gray", size = 1) +
geom_point(aes(color = Country)) +
ggtitle("Men's High Jump World Records Progression") +
theme_minimal()
?subset
subset(records, gender = "female")
subset(records, gender == "female")
?lm
# Model for women
# regression of 'height' on 'year'
women = subset(records, gender == "female")
lm(women$height ~ women$year, data = women)
# Model for women
# regression of 'height' on 'year'
women = subset(records, gender == "female")
height_on_year_female = lm(women$height ~ women$year, data = women)
plot(height_on_year_female)
plot(height_on_year_female)
# Model for women
# regression of 'height' on 'year'
women = subset(records, gender == "female")
height = women$height
year = women$year
height_on_year_female = lm(height ~ year, data = women)
?predict
# predictions for olympic years
years_for_prediction = c(2000, 2004, 2008, 2012, 2016)
predict(height_on_year_female, years_for_prediction)
# Model for men
# regression of 'height' on 'year'
men = subset(records, gender == "male")
height = men$height
year = men$year
height_on_year_female = lm(height ~ year, data = men)
# Model for men
# regression of 'height' on 'year'
men = subset(records, gender == "male")
height = men$height
year = men$year
height_on_year_female = lm(height ~ year, data = men)
# Model for women
# regression of 'height' on 'year'
women = subset(records, gender == "female")
height = women$height
year = women$year
height_on_year_female = lm(height ~ year, data = women)
# predictions for olympic years
years_for_prediction = data.frame(
year = c(2000, 2004, 2008, 2012, 2016))
predict(height_on_year_female, years_for_prediction)
# Model for men
# regression of 'height' on 'year'
men = subset(records, gender == "male")
height = men$height
year = men$year
height_on_year_male = lm(height ~ year, data = men)
plot(height_on_year_male)
# predictions for olympic years
years_for_prediction = data.frame(
year = c(2000, 2004, 2008, 2012, 2016))
predict(height_on_year_male, years_for_prediction)
int(10.2)
integer(10.2)
floor(10.2)
floor(10.7)
floor(10.9)
height_in_feet_int = floor(height_in_meters * 3.2808399)
height_in_meters = 2
height_in_feet_int = floor(height_in_meters * 3.2808399)
height_in_feet_int
height_in_feet_decimal = (height_in_meters * 3.2808399) - height_in_feet_int
(height_in_meters * 3.2808399)
height_in_feet_decimal
decimal_feet_to_inch = height_in_feet_decimal * 12
decimal_feet_to_inch
decimal_in_inch_int = floor(decimal_feet_to_inch)
decimal_in_inch_decimal = decimal_feet_to_inch - decimal_in_inch_int
decimal_in_inch_int
decimal_in_inch_decimal
fraction_numerator = floor(decimal_in_inch_decimal * 16)
fraction_numerator
round(11.7)
fraction_numerator = around(decimal_in_inch_decimal * 8)
fraction_numerator = round(decimal_in_inch_decimal * 8)
fraction_numerator
help.search("gcd")
10 %% 2
10 %% 3
first_number = 24
second_number = 4
while(second_number > 0){
temp_second_number = second_number
second_number = first_number %% second_number
first_number = temp_second_number
}
first_number
second_number = 15
first_number = 15
second_number = 75
while(second_number > 0){
temp_second_number = second_number
second_number = first_number %% second_number
first_number = temp_second_number
}
first_number = 15
while(second_number > 0){
temp_second_number = second_number
second_number = first_number %% second_number
first_number = temp_second_number
}
first_number
first_number = 15
while(second_number > 0){
temp_second_number = second_number
second_number = first_number %% second_number
first_number = temp_second_number
}
first_number
second_number = 75
while(second_number > 0){
temp_second_number = second_number
second_number = first_number %% second_number
first_number = temp_second_number
}
first_number
first_number = 14
second_number = 49
while(second_number > 0){
temp_second_number = second_number
second_number = first_number %% second_number
first_number = temp_second_number
}
first_number
simplify_fraction(14, 49)
simplify_fraction(numerator = 1, denominator = 1){
# function for simplifing the fraction by dividing the greatest common factor
# of numerator and denominator
# input: numerator, a numeric value as numerator
#        denominator, a numeric value as denominator
# output: simplified_numerator, a numeric value as simplified_numerator
#         simplified_denominator, a numeric value as simplified_denominator
greatest_common_factor_fraction =
greatest_common_factor(numerator, denominator)
simplified_numerator = numerator / greatest_common_factor_fraction
simplified_denominator = denominator / greatest_common_factor_fraction
return(c(simplified_numerator, simplified_denominator))
}
simplify_fraction(14, 49)
simplify_fraction = function(numerator = 1, denominator = 1){
# function for simplifing the fraction by dividing the greatest common factor
# of numerator and denominator
# input: numerator, a numeric value as numerator
#        denominator, a numeric value as denominator
# output: simplified_numerator, a numeric value as simplified_numerator
#         simplified_denominator, a numeric value as simplified_denominator
greatest_common_factor_fraction =
greatest_common_factor(numerator, denominator)
simplified_numerator = numerator / greatest_common_factor_fraction
simplified_denominator = denominator / greatest_common_factor_fraction
return(c(simplified_numerator, simplified_denominator))
}
simplify_fraction(14, 49)
greatest_common_factor = function(first_number = 1, second_number = 1){
# function for finding the greatest common factor between two numbers
# input: first_number, a numeric value
#        second_number, a numeric value
# output: a numeric value as the greatest common factor
while(second_number > 0){
temp_second_number = second_number
second_number = first_number %% second_number
first_number = temp_second_number
}
return(first_number)
}
simplify_fraction(14, 49)
simplify_fraction(15, 75)
15*5
convert_height_units_numeric = function(height_in_meters){
# function for converting values in meters to US customary units
# input: height_in_meters, a numeric height value (in meters)
# output: a character vector in US customary units
height_in_feet_int = floor(height_in_meters * 3.2808399)
height_in_feet_decimal = (height_in_meters * 3.2808399) - height_in_feet_int
decimal_in_inch_int = floor(height_in_feet_decimal * 12)
decimal_in_inch_decimal = (height_in_feet_decimal * 12) - decimal_in_inch_int
fraction_numerator = round(decimal_in_inch_decimal * 8)
inch_fraction_part = simplify_fraction(fraction_numerator, 8)
}
inch_fraction_part[1]
convert_height_units_numeric = function(height_in_meters){
# function for converting values in meters to US customary units
# input: height_in_meters, a numeric height value (in meters)
# output: a character vector in US customary units
height_in_feet_int = floor(height_in_meters * 3.2808399)
height_in_feet_decimal = (height_in_meters * 3.2808399) - height_in_feet_int
decimal_in_inch_int = floor(height_in_feet_decimal * 12)
decimal_in_inch_decimal = (height_in_feet_decimal * 12) - decimal_in_inch_int
fraction_numerator = round(decimal_in_inch_decimal * 8)
inch_fraction_part = simplify_fraction(fraction_numerator, 8)
return(c(height_in_feet_int, decimal_in_inch_int, inch_fraction_part[1],
inch_fraction_part[2]))
}
convert_height_units_numeric(2)
convert_height_units_numeric(2.022)
convert_height_units_numeric(2.038)
convert_height_units_numeric(2.04)
convert_height_units_numeric(2.06)
convert_height_units_numeric(2.07)
convert_height_units_numeric(2.09)
convert_height_units_numeric(2.11)
convert_height_units_numeric(2.12)
convert_height_units_numeric(2.15)
convert_height_units_numeric(2.16)
convert_height_units_numeric(2.44)
convert_height_units_numeric(2.45)
convert_height_units_numeric(2.43)
convert_height_units_numeric(2.42)
height_in_meters = records$height
convert_height_units_numeric(height_in_meters)
# Code for testing
height_in_meters = records$height
for (i in length(height_in_meters)){
print(convert_height_units_numeric(height_in_meters[i]))
}
height_in_meters = records$height
height_in_meters
# Code for testing
height_in_meters = records$height
for (i in length(height_in_meters)){
print(convert_height_units_numeric(height_in_meters[i]))
}
for (i in length(height_in_meters)){
print(convert_height_units_numeric(height_in_meters[i]))
}
i
height_in_meters[1]
height_in_meters[2]
height_in_meters[3]
# Code for testing
height_in_meters = records$height
for (i in length(height_in_meters)){
result = convert_height_units_numeric(height_in_meters[i])
print(result)
}
list(length(height_in_meters))
result = list(length(height_in_meters))
result
?list
result = list(0)
result
result = list()
result
# Code for testing
height_in_meters = records$height
result = list()
for (i in length(height_in_meters)){
result[i] = convert_height_units_numeric(height_in_meters[i])
}
# Code for testing
height_in_meters = records$height
for (i in length(height_in_meters)){
print(i)
result = convert_height_units_numeric(height_in_meters[i])
}
# Code for testing
height_in_meters = records$height
for (i in 1:length(height_in_meters)){
print(i)
result = convert_height_units_numeric(height_in_meters[i])
}
# Code for testing
height_in_meters = records$height
for (i in 1:length(height_in_meters)){
print(convert_height_units_numeric(height_in_meters[i]))
}
