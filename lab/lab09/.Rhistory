# bags
bag1 <- c('white', 'white', 'red')
bag2 <- c(rep('white', 3), 'red')
bags <- c('bag1', 'bag2')
repetitions <- 1000
drawn_balls <- character(repetitions)
set.seed(345)
for (i in 1:repetitions) {
# select one bag
chosen_bag <- sample(bags, 1)
# draw a ball from chosen bag
if (chosen_bag == 'bag1') {
drawn_balls[i] <- sample(bag1, 1)
} else {
drawn_balls[i] <- sample(bag2, 1)
}
}
table(drawn_balls) / repetitions
# your vectors box1 and box2
box1 = c('blue', 'blue', 'red')
box2 = c('blue', 'blue', 'red', 'red', 'red', 'white')
# your vectors box1 and box2
box1 = c('blue', 'blue', 'red')
box2 = c('blue', 'blue', 'red', 'red', 'red', 'white')
number = runif(1)
number
# your code to simulate one random experiment
sample_without_replacement = function() {
number = runif(1)
# if number is greater than 0.5, then from box1
if(number > 0.5){
sample(bag1, 4)
}
# if number is less than 0.5, then from box2
else {
sample(bag2, 4)
}
}
sample_without_replacement()
# your code to simulate one random experiment
sample_without_replacement = function() {
number = runif(1)
# if number is greater than 0.5, then from box1
if(number > 0.5){
sample(bag1, 4, replace = TRUE)
}
# if number is less than 0.5, then from box2
else {
sample(bag2, 4, replace = TRUE)
}
}
sample_without_replacement()
?matrix
drawn_balls = matrix(nrow = 1000, ncol = 4)
drawn_balls
drawn_balls = matrix(data = 0, nrow = 1000, ncol = 4)
drawn_balls
drawn_balls = matrix(data = 0, nrow = 1000, ncol = 4)
for(i in 1:1000) {
drawn_balls[i,] = sample_without_replacement()
}
drawn_balls
count_blues = function(result){
sum(result == "blue")
}
apply(drawn_balls, count_blues)
?mapply
counts = mapply(drawn_balls, FUN = count_blues, by = 1)
counts = mapply(drawn_balls, FUN = count_blues)
counts
?mapply
count_blues = function(result){
sum(result == "blue")
}
counts = mapply(drawn_balls, 1, FUN = count_blues)
drawn_balls
counts = mapply(drawn_balls, 1, FUN = count_blues)
count_blues()
count_blues = function(result){
sum(result == "blue")
}
count_blues()
count_blues
drawn_balls
counts = mapply(FUN = count_blues, drawn_balls)
counts
counts = sapply(drawn_balls, 1, FUN = count_blues)
?apply
?sapply
counts = apply(drawn_balls, 1, FUN = count_blues)
counts
drawn_balls
sample_without_replacement = function() {
number = runif(1)
# if number is greater than 0.5, then from box1
if(number > 0.5){
sample(bag1, 4, replace = FALSE)
}
# if number is less than 0.5, then from box2
else {
sample(bag2, 4, replace = FALSE)
}
}
sample_without_replacement = function() {
number = runif(1)
# if number is greater than 0.5, then from box1
if(number > 0.5){
sample(bag1, 4, replace = TRUE)
}
# if number is less than 0.5, then from box2
else {
sample(bag2, 4, replace = FALSE)
}
}
drawn_balls = matrix(data = 0, nrow = 1000, ncol = 4)
for(i in 1:1000) {
drawn_balls[i,] = sample_without_replacement()
}
count_blues = function(result){
sum(result == "blue")
}
counts = apply(drawn_balls, 1, FUN = count_blues)
counts
sum(drawn_balls[1,] == 'blue')
sum(drawn_ball == 'blue')
sum(drawn_balls == 'blue')
sample_without_replacement()
sample_without_replacement()
sample_without_replacement()
sample_without_replacement()
sample_without_replacement()
sample_without_replacement()
sample_without_replacement()
sum(drawn_balls == 'blue')
bag1 = c('blue', 'blue', 'red')
bag2 = c('blue', 'blue', 'red', 'red', 'red', 'white')
sample_without_replacement = function() {
number = runif(1)
# if number is greater than 0.5, then from box1
if(number > 0.5){
sample(bag1, 4, replace = TRUE)
}
# if number is less than 0.5, then from box2
else {
sample(bag2, 4, replace = FALSE)
}
}
```
3. Repeat the experiment 1000 times using a `for` loop. To store the drawn
samples, use a matrix `drawn_balls`. This matrix will have 1000 rows and 4 columns.
In each row you assign the output of a random sample of balls.
```{r}
# your code to draw the balls according to the random experiment
# (repeated 1000 times)
drawn_balls = matrix(data = 0, nrow = 1000, ncol = 4)
for(i in 1:1000) {
drawn_balls[i,] = sample_without_replacement()
}
```
Your matrix `drawn_balls` could look like this (first five rows):
```
[,1]   [,2]    [,3]    [,4]
[1,] "blue" "red"   "red"   "blue"
[2,] "red"  "blue"  "white" "red"
[3,] "red"  "blue"  "red"   "red"
```
[5,] "red"  "red"   "blue"  "white"
[4,] "red"  "red"   "red"   "blue"
3. Once you filled the matrix `drawn_balls`, compute the proportion of samples
containing: 0, 1, 2, 3, or 4 blue balls.
```{r}
sum(result == "blue")
count_blues = function(result){
}
counts = apply(drawn_balls, 1, FUN = count_blues)
```
\bigskip
counts
drawn_balls
counts = apply(drawn_balls, 1, FUN = count_blues)
counts
drawn_balls
counts = sapply(drawn_balls, 1, FUN = count_blues)
counts = lapply(drawn_balls, 1, FUN = count_blues)
counts = mapply(drawn_balls, 1, FUN = count_blues)
count_blues = function(result){
sum(result == "blue")
}
count_blues(drawn_balls)
count_blues(drawn_balls[1,])
counts = apply(drawn_balls, 1, count_blues)
counts
counts = apply(drawn_balls, 1, count_blues)
counts = apply(X = drawn_balls, MARGIN = 1, FUN = count_blues)
COUNTS
counts
counts = apply(drawn_balls, 1, FUN = count_blues)
counts
count_blues = function(result){
sum(result == "blue")
}
counts = apply(drawn_balls, 1, FUN = count_blues)
counts
bag1 = c('blue', 'blue', 'red')
bag2 = c('blue', 'blue', 'red', 'red', 'red', 'white')
```
2. The random experiment involves generating a uniform random number using
`runif(1)`. If this number is greater than 0.5, get a `sample()` without
replacement of `size = 4` from `box1.` Otherwise, get a `sample()` without
replacement of `size = 4` from `box2`.
```{r}
# your code to simulate one random experiment
sample_without_replacement = function() {
number = runif(1)
# if number is greater than 0.5, then from box1
if(number > 0.5){
sample(bag1, 4, replace = TRUE)
}
# if number is less than 0.5, then from box2
else {
sample(bag2, 4, replace = FALSE)
}
}
```
3. Repeat the experiment 1000 times using a `for` loop. To store the drawn
samples, use a matrix `drawn_balls`. This matrix will have 1000 rows and 4 columns.
In each row you assign the output of a random sample of balls.
```{r}
# your code to draw the balls according to the random experiment
# (repeated 1000 times)
drawn_balls = matrix(data = 0, nrow = 1000, ncol = 4)
for(i in 1:1000) {
drawn_balls[i,] = sample_without_replacement()
}
```
Your matrix `drawn_balls` could look like this (first five rows):
```
[,1]   [,2]    [,3]    [,4]
[1,] "blue" "red"   "red"   "blue"
[2,] "red"  "blue"  "white" "red"
[4,] "red"  "red"   "red"   "blue"
[3,] "red"  "blue"  "red"   "red"
```
[5,] "red"  "red"   "blue"  "white"
containing: 0, 1, 2, 3, or 4 blue balls.
3. Once you filled the matrix `drawn_balls`, compute the proportion of samples
```{r}
count_blues = function(result){
sum(result == "blue")
}
counts = apply(drawn_balls, 1, FUN = count_blues)
```
\bigskip
counts
?dim
dim(counts) = c(1000, 4)
dim(counts) = c(1000, 1)
counts
sum(counts == 0) / length(counts)
sum(counts == 1) / length(counts)
sum(counts == 2) / length(counts)
sum(counts == 3) / length(counts)
sum(counts == 4) / length(counts)
